{
     "algorithm": "Algorithm: \"Greedy Randomized Adaptive Search Procedure (GRASP) for TSP\"",
     "code": "import numpy as np\nimport random\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    # Create a list of candidate nodes with their distances from the current node\n    candidates = [(node, distance_matrix[current_node, node]) for node in unvisited_nodes]\n    \n    # Calculate the lower and upper bound for the restricted candidate list\n    lower_bound = min(candidates, key=lambda x: x[1])[1]\n    upper_bound = max(candidates, key=lambda x: x[1])[1]\n    \n    # Create a restricted candidate list (RCL) with nodes within a random alpha range\n    alpha = random.uniform(0, 1)\n    rcl = [node for node, dist in candidates if lower_bound <= dist <= alpha * (upper_bound - lower_bound) + lower_bound]\n    \n    # Select the next node from the RCL randomly\n    next_node = random.choice(rcl)\n    \n    return next_node",
     "objective": 16.08229,
     "other_inf": null
}