[
     {
          "algorithm": " ```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the relative capacity of each bin\n    relative_capacity = bins - item\n    # Calculate the score as the inverse of the relative capacity squared\n    scores = 1 / (relative_capacity**2 + 1e-9)  # Add a small constant to avoid division by zero\n    # Normalize the scores to ensure they sum up to 1\n    scores = scores / np.sum(scores)\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm description: The new algorithm calculates the score as the product of the relative capacity and a penalty factor that increases as the relative capacity approaches the maximum capacity, and then normalizes the scores.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the relative capacity of each bin\n    relative_capacity = bins - item\n    # Calculate the penalty factor as the inverse of the relative capacity\n    penalty_factor = 1 / relative_capacity\n    # Calculate the score as the product of the relative capacity and the penalty factor\n    scores = relative_capacity * penalty_factor\n    # Add a small constant to avoid division by zero\n    scores = scores / (scores.sum() + 1e-9)\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the score for each bin based on the ratio of its remaining capacity to the sum of remaining capacities, and then adjusts the scores by a factor inversely proportional to the square of the difference between the bin's capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the remaining capacity for each bin\n    remaining_capacity = bins - item\n    # Calculate the total remaining capacity\n    total_remaining_capacity = np.sum(remaining_capacity)\n    # Calculate the initial score as the ratio of each bin's remaining capacity to the total\n    initial_scores = remaining_capacity / total_remaining_capacity\n    # Adjust the scores by a factor inversely proportional to the square of the difference between the bin's capacity and the item size\n    adjusted_scores = initial_scores * (1 / ((bins - item)**2 + 1e-9))\n    # Normalize the scores to ensure they sum up to 1\n    scores = adjusted_scores / np.sum(adjusted_scores)\n    return scores",
          "objective": 0.05071,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the score for each bin based on the ratio of its remaining capacity to the sum of remaining capacities, then adjusts the scores by a factor inversely proportional to the cube of the sum of the bin's capacity and the item size, and finally applies a sigmoid function to the scores to ensure they are within a reasonable range.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the remaining capacity for each bin\n    remaining_capacity = bins - item\n    # Calculate the total remaining capacity\n    total_remaining_capacity = np.sum(remaining_capacity)\n    # Calculate the initial score as the ratio of each bin's remaining capacity to the total\n    initial_scores = remaining_capacity / total_remaining_capacity\n    # Adjust the scores by a factor inversely proportional to the cube of the sum of the bin's capacity and the item size\n    adjusted_scores = initial_scores * (1 / ((bins + item)**3 + 1e-9))\n    # Apply a sigmoid function to the scores to ensure they are within a reasonable range\n    scores = 1 / (1 + np.exp(-adjusted_scores))\n    # Normalize the scores to ensure they sum up to 1\n    scores = scores / np.sum(scores)\n    return scores",
          "objective": 0.40879,
          "other_inf": null
     }
]