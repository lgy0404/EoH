[
     {
          "algorithm": " ```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the relative capacity of each bin\n    relative_capacity = bins - item\n    # Calculate the score as the inverse of the relative capacity squared\n    scores = 1 / (relative_capacity**2 + 1e-9)  # Add a small constant to avoid division by zero\n    # Normalize the scores to ensure they sum up to 1\n    scores = scores / np.sum(scores)\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": " ```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin based on the remaining capacity\n    scores = bins - item\n    # Normalize the scores to ensure self-consistency\n    scores = scores / np.sum(scores)\n    return scores",
          "objective": 1.51534,
          "other_inf": null
     }
]