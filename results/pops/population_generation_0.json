[
     {
          "algorithm": "Algorithm: \"Greedy Randomized Adaptive Search Procedure (GRASP) for TSP\", Main steps: 1. Generate a restricted candidate list (RCL) of candidate nodes based on a greedy function and a randomization parameter. 2. Randomly select the next node from the RCL. 3. Update the current node and remove the selected node from unvisited nodes.",
          "code": "import numpy as np\nimport random\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    randomization_parameter = 0.5\n    rcl = []\n    min_dist = np.min(distance_matrix[current_node, unvisited_nodes])\n    max_dist = np.max(distance_matrix[current_node, unvisited_nodes])\n    threshold = min_dist + randomization_parameter * (max_dist - min_dist)\n    \n    for node in unvisited_nodes:\n        if distance_matrix[current_node, node] <= threshold:\n            rcl.append(node)\n    \n    next_node = random.choice(rcl)\n    return next_node",
          "objective": 15.69583,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: Novel Probabilistic Node Selection (NPNS), Main Steps: 1. Calculate the probability of each unvisited node being the next node based on its distance to the current node and the remaining nodes. 2. Select the next node with the highest probability.",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    # Calculate the distance from current node to all unvisited nodes\n    current_distances = distance_matrix[current_node, unvisited_nodes]\n    \n    # Calculate the distance from all unvisited nodes to the destination node\n    destination_distances = distance_matrix[unvisited_nodes, destination_node]\n    \n    # Calculate the probability of each unvisited node being the next node\n    # based on its distance to the current node and the remaining nodes\n    probabilities = 1 / (current_distances + destination_distances)\n    probabilities /= np.sum(probabilities)\n    \n    # Select the next node with the highest probability\n    next_node = np.random.choice(unvisited_nodes, p=probabilities)\n    \n    return next_node",
          "objective": 22.14067,
          "other_inf": null
     }
]