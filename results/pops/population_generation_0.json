[
     {
          "algorithm": "\nOur novel algorithm selects the next node based on the angle between the current node-destination node vector and the vectors from the current node to each unvisited node, prioritizing nodes that form smaller angles in a counter-clockwise direction.\n",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    angles = []\n    for node in unvisited_nodes:\n        vec1 = np.array([distance_matrix[current_node][destination_node], 0])\n        vec2 = np.array([distance_matrix[current_node][node], 0])\n        angle = np.arccos(np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2)))\n        if np.cross(vec1, vec2) < 0:\n            angle = 2*np.pi - angle\n        angles.append(angle)\n    \n    next_node = unvisited_nodes[np.argmin(angles)]\n    \n    return next_node",
          "objective": 6.60788,
          "other_inf": null
     },
     {
          "algorithm": "\n  The algorithm selects the next node by finding the node with the minimum average distance to all unvisited nodes from the current node, while also considering the distance to the destination node as a tiebreaker.\n",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    min_avg_distance = float('inf')\n    next_node = None\n    \n    for node in unvisited_nodes:\n        avg_distance = np.mean([distance_matrix[current_node][node], distance_matrix[node][destination_node]])\n        \n        if avg_distance < min_avg_distance:\n            min_avg_distance = avg_distance\n            next_node = node\n    \n    return next_node",
          "objective": 7.6436,
          "other_inf": null
     },
     {
          "algorithm": "\nProposed algorithm: Traverse all unvisited nodes and select the next node that is the farthest from the current node.\n",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    max_distance = 0\n    next_node = -1\n    \n    for node in unvisited_nodes:\n        if distance_matrix[current_node][node] > max_distance:\n            max_distance = distance_matrix[current_node][node]\n            next_node = node\n    \n    return next_node",
          "objective": 34.694,
          "other_inf": null
     }
]